map "http://fhir.org/guides/who/smart-immunization/StructureMap/IMMZ-C-QRToPatient" = "IMMZ-C-QRToPatient"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QResp as source
uses "http://fhir.org/guides/who/smart-immunization/StructureDefinition/IMMZ-C-register-client" alias IMMZC as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target

imports "http://fhir.org/guides/who/smart-immunization/StructureMap/IMMZ-C-QRToLM"
imports "http://fhir.org/guides/who/smart-immunization/StructureMap/IMMZ-C-LMToPatient"

group QRestToIMMZC (
  source qr : QResp,
  target patient: Patient
) {
  qr -> create("http://fhir.org/guides/who/smart-immunization/StructureDefinition/IMMZ-C-register-client") as model 
  then{
    qr -> model then QRespToIMMZC( qr, model) "QRtoLM";
    qr -> patient then IMMZCToPatient( model, patient ) "LMtoPatient";
  } "QRtoPatient";
}

/*
group QRespToIMMZC (
  source qr : QResp,
  target patient : Patient
) {
  qr.item as item then {

    item.answer first as answer where item.linkId = 'uniqueId' -> patient.identifier as identifier then {
      answer.valueString as content -> identifier.value = content  "SetIdentifier";
    } "FirstAnswerForIdentifier";

    item as name where item.linkId = 'name' -> patient.name as pname then NameToHumanName( name, pname ) "SetNames";

    item.answer first as answer where item.linkId = 'sex' then {
      answer.valueCoding as coding then {
        coding.code as content -> patient.gender = translate(content, 
            'http://fhir.org/guides/who/smart-immunization/ConceptMap/IMMZ.C.SexToAdministrativeGender', 
            'code') "SetSex";
      } "ProcessCoding";
    } "FirstAnswerForIdentifier";
  
    item.answer first as answer where item.linkId = 'birthDate' then {
      answer.valueDate as content -> patient.birthDate = content "SetBirthDate";
    } "FirstAnswerForBirthDate";

    item as caregiver where item.linkId = 'caregiver' -> patient.contact as contact, contact.name as hname 
      then NameToHumanName( caregiver, hname ) "SetCaregiver";

    item.answer first as answer where item.linkId = 'phone' -> patient.telecom as telecom then {
       answer.valueString as content -> telecom.value = content, telecom.system = 'phone' "SetPhone";
     } "FirstAnswerForPhone";

    item.answer first as answer where item.linkId = 'administrativeArea' -> patient.address as address then {
      answer.valueCoding first as coding -> address then {
        coding.code as content -> address.text = content "SetAddressToCode";
        coding.display as content -> address.text = content "SetAddressToDisplay";
      } "SetAddressText";
    } "FirstAnswerForAdministrativeArea";

  } "ProcessItems";

}

group NameToHumanName( 
  source name,
  target hname
) {
  name.item as item then {

    item.answer first as answer where item.linkId = 'fullName' then {
      answer.valueString as content -> hname.text = content "SetFullName";
    } "FirstAnswerForFullName";

    item.answer first as answer where item.linkId = 'firstName' then {
      answer.valueString as content -> hname.given = content "SetFirstName";
    } "FirstAnswerForFirstName";

    item.answer first as answer where item.linkId = 'familyName' then {
      answer.valueString as content -> hname.family = content "SetFamilyName";
    } "FirstAnswerForFamilyName";

  } "process name items";
}
*/